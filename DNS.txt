DNS 

SERVER 

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#define PORT 8080
#define BUF_SIZE 512
struct dns_record {
    char domain[50];
    char ip[16];
};
struct dns_record records[] = {
    {"www.google.com", "8.8.8.8"},
    {"www.facebook.com", "157.240.22.35"},
    {"www.yahoo.com", "98.138.219.231"},
    {"www.openai.com", "104.21.9.233"},
};
int find_ip(char *domain, char *ip) {
    for (int i = 0; i < sizeof(records) / sizeof(records[0]); i++) {
        if (strcmp(records[i].domain, domain) == 0) {
            strcpy(ip, records[i].ip);
            return 1; // Domain found
        }
    }
    return 0; 
}
int main() {
    int sockfd;
    char buffer[BUF_SIZE];
    struct sockaddr_in servaddr, cliaddr;
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    } else {
        printf("Socket successfully created.\n");
    }
    memset(&servaddr, 0, sizeof(servaddr));
    memset(&cliaddr, 0, sizeof(cliaddr));
    servaddr.sin_family = AF_INET;  // IPv4
    servaddr.sin_addr.s_addr = INADDR_ANY;  // Any IP address
    servaddr.sin_port = htons(PORT);  // Server port
    if (bind(sockfd, (const struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {
        perror("Bind failed");
        close(sockfd);
        exit(EXIT_FAILURE);
    } else {
        printf("Socket successfully bound to port %d.\n", PORT);
    }
    int len, n;
    char ip[16];  // To store the found IP address
    len = sizeof(cliaddr);  
    while (1) {
        n = recvfrom(sockfd, buffer, BUF_SIZE, 0, (struct sockaddr *)&cliaddr, &len);
        buffer[n] = '\0';  // Null-terminate the received string
        printf("Received domain: %s\n", buffer);
        if (find_ip(buffer, ip)) {
            printf("Domain found: %s -> %s\n", buffer, ip);
            sendto(sockfd, ip, strlen(ip), 0, (struct sockaddr *)&cliaddr, len);
        } else {
            printf("Domain not found: %s\n", buffer);
            char *not_found = "Domain not found";
            sendto(sockfd, not_found, strlen(not_found), 0, (struct sockaddr *)&cliaddr, len);
        }
    }
    close(sockfd);
    return 0;
}


CLIENT

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#define PORT 8080
#define BUF_SIZE 512
int main() {
    int sockfd;
    char buffer[BUF_SIZE];
    struct sockaddr_in servaddr;
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }
    memset(&servaddr, 0, sizeof(servaddr));
    servaddr.sin_family = AF_INET; // IPv4
    servaddr.sin_port = htons(PORT);
    servaddr.sin_addr.s_addr = INADDR_ANY;
    char domain[50];
    while (1) {
        printf("Enter URL to be sent to server: ");
        scanf("%s", domain);
        sendto(sockfd, domain, strlen(domain), 0, (const struct sockaddr *)&servaddr, sizeof(servaddr));
        printf("DNS query sent for domain: %s\n", domain);
        int n = recvfrom(sockfd, buffer, BUF_SIZE, 0, NULL, NULL);
        buffer[n] = '\0'; // Null-terminate the received string
        printf("IP from server is: %s\n", buffer);
    }
    close(sockfd);
    return 0;
}
